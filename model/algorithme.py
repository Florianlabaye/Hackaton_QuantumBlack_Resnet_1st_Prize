# -*- coding: utf-8 -*-
"""Algorithme.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C8FBwn_qQN53VXQnI3LlxisPTqCZQ4Jx
"""

#Import librairies

import torch
import torch.nn.functional as F
import numpy as np

import torchvision as T
import torchvision.transforms as transforms
from PIL import Image

import warnings
import matplotlib.pyplot as plt
warnings.filterwarnings('ignore')

# Additional import
import time
import copy
import pandas as pd

import os
from torchvision.io import read_image
from torch.utils.data import Dataset
from torchvision import models

from torch.utils.data import DataLoader

#NÃ©cessite un mac M1
device = torch.device("mps") 

# Commented out IPython magic to ensure Python compatibility.

model_ft = models.resnet34(pretrained=True)

# Top level data directory. Here we assume the format of the directory conforms
#   to the ImageFolder structure
data_dir = "model/images"

# Models to choose from [resnet, alexnet, vgg, squeezenet, densenet, inception]
model_name = "resnet"

# Number of classes in the dataset
num_classes = 2

# Batch size for training (change depending on how much memory you have)
batch_size = 64

# Number of epochs to train for
num_epochs = 15

# Flag for feature extracting. When False, we finetune the whole model,
#   when True we only update the reshaped layer params
feature_extract = True

#modify model to have 2 outputs
model_ft.fc = torch.nn.Linear(512, num_classes)

class CustomImageDataset(Dataset):
    def __init__(self, annotations_file, img_dir, split, transform=None, target_transform=None):
        df=pd.read_csv(annotations_file)
        self.img_labels = df.loc[df.split==split]
        #self.img_labels = pd.read_csv(annotations_file)
        self.img_dir = img_dir
        self.transform = transform
        self.target_transform = target_transform

    def __len__(self):
        return len(self.img_labels)

    def __getitem__(self, idx):
        img_path = os.path.join(self.img_dir, self.img_labels.iloc[idx, 0])
        image = read_image(img_path)
        label = self.img_labels.iloc[idx, 1]
        if self.transform:
            image = self.transform(image)
        if self.target_transform:
            label = self.target_transform(label)
        #image = image.unsqueeze(0)
        return image, label

preprocess = transforms.Compose([
    transforms.ToPILImage(),
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])
str_data = "model/x-ai_data.csv"
dataset_train=CustomImageDataset(str_data ,data_dir,split='train',transform=preprocess)
dataset_test=CustomImageDataset(str_data ,data_dir,split='test',transform=preprocess)
dataset_validation=CustomImageDataset(str_data,data_dir,split='validation',transform=preprocess)



train_dataloader = DataLoader(dataset_train, batch_size=64, shuffle=True)
test_dataloader = DataLoader(dataset_test, batch_size=64, shuffle=False)
validation_dataloader = DataLoader(dataset_validation, batch_size=64, shuffle=False)

dataloaders_dict={'train':train_dataloader,'test':test_dataloader,'validation':validation_dataloader}

#Training the model

def train_model(model, dataloaders, criterion, optimizer, num_epochs=25, is_inception=False):
    since = time.time()

    val_acc_history = []

    best_model_wts = copy.deepcopy(model.state_dict())
    best_acc = 0.0

    for epoch in range(num_epochs):
        print('Epoch {}/{}'.format(epoch, num_epochs - 1))
        print('-' * 10)

        # Each epoch has a training and validation phase
        for phase in ['train', 'test']:
            if phase == 'train':
                model.train()  # Set model to training mode
            else:
                model.eval()   # Set model to evaluate mode

            running_loss = 0.0
            running_corrects = 0

            # Iterate over data.
            for inputs, labels in dataloaders[phase]:
                print(inputs.size())
                inputs = inputs.to(device)
                labels=torch.tensor(labels)
                labels = labels.to(device)

                # zero the parameter gradients
                optimizer.zero_grad()

                # forward
                # track history if only in train
                with torch.set_grad_enabled(phase == 'train'):
                    # Get model outputs and calculate loss
                    # Special case for inception because in training it has an auxiliary output. In train
                    #   mode we calculate the loss by summing the final output and the auxiliary output
                    #   but in testing we only consider the final output.
                    if is_inception and phase == 'train':
                        # From https://discuss.pytorch.org/t/how-to-optimize-inception-model-with-auxiliary-classifiers/7958
                        outputs, aux_outputs = model(inputs)
                        loss1 = criterion(outputs, labels)
                        loss2 = criterion(aux_outputs, labels)
                        loss = loss1 + 0.4*loss2
                    else:
                        outputs = model(inputs)
                        print(outputs.size())
                        loss = criterion(outputs, labels)

                    _, preds = torch.max(outputs, 1)

                    # backward + optimize only if in training phase
                    if phase == 'train':
                        loss.backward()
                        optimizer.step()

                # statistics
                running_loss += loss.item() * inputs.size(0)
                running_corrects += torch.sum(preds == labels.data)

            epoch_loss = running_loss / len(dataloaders[phase].dataset)
            epoch_acc = running_corrects.float() / len(dataloaders[phase].dataset)

            print('{} Loss: {:.4f} Acc: {:.4f}'.format(phase, epoch_loss, epoch_acc))

            # deep copy the model
            if phase == 'test' and epoch_acc > best_acc:
                best_acc = epoch_acc
                best_model_wts = copy.deepcopy(model.state_dict())
            if phase == 'test':
                val_acc_history.append(epoch_acc)

        print()

    time_elapsed = time.time() - since
    print('Training complete in {:.0f}m {:.0f}s'.format(time_elapsed // 60, time_elapsed % 60))
    print('Best val Acc: {:4f}'.format(best_acc))

    # load best model weights
    model.load_state_dict(best_model_wts)
    return model, val_acc_history

def set_parameter_requires_grad(model, feature_extracting):
    if feature_extracting:
        for param in model.parameters():
            param.requires_grad = False

#Optimizer

# Send the model to GPU
model_ft = model_ft.to(device)

# Gather the parameters to be optimized/updated in this run. If we are
#  finetuning we will be updating all parameters. However, if we are
#  doing feature extract method, we will only update the parameters
#  that we have just initialized, i.e. the parameters with requires_grad
#  is True.
params_to_update = model_ft.parameters()
print("Params to learn:")
if feature_extract:
    params_to_update = []
    for name,param in model_ft.named_parameters():
        if param.requires_grad == True:
            params_to_update.append(param)
            print("\t",name)
else:
    for name,param in model_ft.named_parameters():
        if param.requires_grad == True:
            print("\t",name)

# Observe that all parameters are being optimized
optimizer_ft = torch.optim.SGD(params_to_update, lr=0.001, momentum=0.9)

#Training the dataset

# Setup the loss fxn
criterion = torch.nn.CrossEntropyLoss()

# Train and evaluate
model_ft, hist = train_model(model_ft, dataloaders_dict, criterion, optimizer_ft, num_epochs=num_epochs, is_inception=(model_name=="inception"))

#Validate the model 

def validate_model(model, dataloaders, criterion, optimizer, is_inception=False):
    since = time.time()

    val_acc_history = []

    best_model_wts = copy.deepcopy(model.state_dict())
    best_acc = 0.0

    for epoch in range(1):
        print('Epoch {}/{}'.format(epoch, 1))
        print('-' * 10)

        # Each epoch has a training and validation phase
        for phase in ['validation']:
            model.eval()   # Set model to evaluate mode

            running_loss = 0.0
            running_corrects = 0

            # Iterate over data.
            for inputs, labels in dataloaders[phase]:
                print(inputs.size())
                inputs = inputs.to(device)
                labels=torch.tensor(labels)
                labels = labels.to(device)

                # zero the parameter gradients
                optimizer.zero_grad()

                # forward
                # track history if only in train
                with torch.set_grad_enabled(phase == 'train'):
                    # Get model outputs and calculate loss
                    # Special case for inception because in training it has an auxiliary output. In train
                    #   mode we calculate the loss by summing the final output and the auxiliary output
                    #   but in testing we only consider the final output.
                    if is_inception and phase == 'train':
                        # From https://discuss.pytorch.org/t/how-to-optimize-inception-model-with-auxiliary-classifiers/7958
                        outputs, aux_outputs = model(inputs)
                        loss1 = criterion(outputs, labels)
                        loss2 = criterion(aux_outputs, labels)
                        loss = loss1 + 0.4*loss2
                    else:
                        outputs = model(inputs)
                        print(outputs.size())
                        loss = criterion(outputs, labels)

                    _, preds = torch.max(outputs, 1)

                # statistics
                running_loss += loss.item() * inputs.size(0)
                running_corrects += torch.sum(preds == labels.data)

            epoch_loss = running_loss / len(dataloaders[phase].dataset)
            epoch_acc = running_corrects.double() / len(dataloaders[phase].dataset)

            print('{} Loss: {:.4f} Acc: {:.4f}'.format(phase, epoch_loss, epoch_acc))

        print()

    time_elapsed = time.time() - since
    print('Validation complete in {:.0f}m {:.0f}s'.format(time_elapsed // 60, time_elapsed % 60))
    print('Valuation Acc: {:4f}'.format(best_acc))

validate_model(model_ft, dataloaders_dict, criterion, optimizer_ft, is_inception=(model_name=="inception"))

#Define hook functions 

output_saving = 0
grad_output_saving = 0

def forward_hook(self, input, output):
    global output_saving
    # List of size 1 containing a tensor of size (1, C, H, W)
    output_saving = output

def backward_hook(self, grad_input, grad_output):
    global grad_output_saving
    # List of size 1 containing a tensor of size (1, C, H, W)
    grad_output_saving = grad_output

#Register hooks
handlef=model_ft.layer4[2].conv2.register_forward_hook(forward_hook)
handleb=model_ft.layer4[2].conv2.register_backward_hook(backward_hook)

# Commented out IPython magic to ensure Python compatibility.

def gradCAM(dir_path):
    img = read_image(dir_path)
    img_or=Image.open(dir_path)
    fig, axs = plt.subplots(1, 3, figsize=(15, 6))
    print(img_or)
    axs[0].imshow(img_or)
    axs[0].set_title("Original image")

    img=preprocess(img)
    img=img.unsqueeze(0)
    img=img.to(device)
    model_ft.zero_grad()
    ans = model_ft(img)
    

    # Backpropagating just on the given answer
    model_ft.zero_grad()
    only_class_ans = ans[0][1]
    only_class_ans.backward()

    # Construction of the grad_cam map
    grad_cam = torch.zeros_like(output_saving[0,0,:,:])

    nb_features = output_saving[0].size()[0]

    for i in range(nb_features):
        # We take the mean of each feature of the gradient multiplied by the output
        # use output_saving and grad_output_saving to complete the following line.
        # You have to understand eq. 1 and 2 in the paper.
        grad_cam += torch.mean(grad_output_saving[0][0,i,:,:]) * output_saving[0][i,:,:]

    Relu = torch.nn.ReLU()
    grad_cam = Relu(grad_cam)
    grad_cam=torch.Tensor.cpu(grad_cam)
    grad_cam = grad_cam.detach().numpy()

    cam = cv2.resize(grad_cam, (224, 224))
    cam = np.maximum(cam, 0)
    cam = (cam - np.min(cam)) / (np.max(cam) - np.min(cam))  # Normalize between 0-1
    cam = np.uint8(cam * 255)  # Scale between 0-255 to visualize

    # Heatmap of activation map
    activation_heatmap = cv2.applyColorMap(cam, cv2.COLORMAP_HSV)
    axs[1].imshow(activation_heatmap)
    axs[1].set_title("Heatmap of activation map")

    # Heatmap on picture
    img = cv2.imread(dir_path)
    org_img = cv2.resize(img, (224, 224))
    img_with_heatmap = np.float32(activation_heatmap) + np.float32(org_img)
    img_with_heatmap *= 0.99/ np.max(img_with_heatmap)
    axs[2].imshow(img_with_heatmap)
    axs[2].set_title("Heatmap on picture")

    plt.show()

gradCAM(dir_path = 'silo_test_4.png')

#Program which takes an img and answer 1 or 0 if there is a silo, if there is a Silo, return the grad_map of it 

def decisionSilo(dir_path):
  img = read_image(img_dir)
  img=preprocess(img)
  img=img.unsqueeze(0)
  img=img.to(device)
  
  ans=model_ft(img)
  if ans[0][1]>ans[0][0]: 
    gradCAM(dir_path)
    return 1
  else:return 0

#Test decisionSilo

img_dir='/content/drive/MyDrive/Ecole/Hackathon/ImagesTests/silo_test_2.png'
decisionSilo(img_dir)